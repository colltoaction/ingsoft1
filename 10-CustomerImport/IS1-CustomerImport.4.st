Object subclass: #ClassMapping	instanceVariableNames: 'mappedClass mappings tableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!ClassMapping methodsFor: 'testing' stamp: 'HernanWilkinson 10/31/2016 23:02'!isFor: aClass	^mappedClass = aClass! !!ClassMapping methodsFor: 'table' stamp: 'HernanWilkinson 10/31/2016 23:25'!tableName		^tableName ! !!ClassMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:25'!initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings	mappedClass := aClass.	tableName := aTableName.	mappings := aCollectionOfMappings ! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapEmbededOf: anObject into: record	mappings do: [ :aMapping | aMapping embeded: anObject into: record ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmapIdOf: aRecord into: unMappedObject	unMappedObject instVarNamed: #id put: (aRecord at: #id)! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapIdOf: anObject into: record using: aDataBaseSession	| newId |	newId := aDataBaseSession newIdFor: anObject.	anObject instVarNamed: #id put: newId.	record at: #id put: newId! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:43'!unmap: aRecord into: unMappedObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping unmap: aRecord into: unMappedObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 00:40'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	mappings do: [ :aMapping | aMapping mapOneToManyRelationshipsOf: anObject using: aDataBaseSession ]! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:42'!unmap: aRecord using: aDataBaseSession	| unMappedObject |	unMappedObject := mappedClass basicNew.	self unmapIdOf: aRecord into: unMappedObject.	self unmap: aRecord into: unMappedObject using: aDataBaseSession.	^ unMappedObject! !!ClassMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 00:40'!map: anObject using: aDataBaseSession	| record |	self toDo: 'se puede optimizar usando array para registros y guardando definicion de tabla una vez'.	record := Dictionary new.		self mapIdOf: anObject into: record using: aDataBaseSession.	self mapEmbededOf: anObject into: record.	"agrego aca el registro y no luego de mapear el id para que lo agrege completo. Lo agrego antes de mapear las rel one to many 	porque si usuara una db de verdad habria foreign key constrain"	aDataBaseSession add: record on: self tableName.	self mapOneToManyRelationshipsOf: anObject using: aDataBaseSession! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ClassMapping class	instanceVariableNames: ''!!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:23'!withDefaultTableNameFor: aClass mappingAll: aCollectionOfMappings	^self for: aClass into: (self defaultTableNameFor: aClass) mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:44'!defaultTableNameFor: aClass		^aClass name asString! !!ClassMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:24'!for: aClass into: aTableName mappingAll: aCollectionOfMappings	self assertValidTableName: aTableName.	self assertHasIdInstanceVariable: aClass.	self assertValidMappings: aCollectionOfMappings for: aClass.		^self new initializeFor: aClass into: aTableName mappingAll: aCollectionOfMappings		! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 19:26'!assertValidMappings: aCollectionOfMappings for: aClass 	self toDo: 'Lo mejor seria recolectar todos los erroes de mapeo y no parar en el primero'.	aCollectionOfMappings do: [ :aMapping | aMapping assertIsValidFor: aClass ]	! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidTableName: aTableName	aTableName trimBoth isEmpty ifTrue: [ self error: 'Table name can not be empty' ]! !!ClassMapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 21:15'!assertHasIdInstanceVariable: aClass 		(aClass hasInstVarNamed: #id) ifFalse: [ self error: ('<1s> has no id instance variable' expandMacrosWith: aClass name) ]! !Object subclass: #DataBaseSession	instanceVariableNames: 'configuration tables id cache'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:14'!mapperFor: aClass	self toDo: 'se puede mejorar performanco usando un dictionary'.	^configuration		detect: [ :aClassMapper | aClassMapper isFor: aClass ] 		ifNone: [ self error: ('There is no mapper for <1s>' expandMacrosWith: aClass name) ]! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:15'!relatedOfType: aRelatedClass for: anOwner	| table relatedIds |		table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := table at: (self idOf: anOwner) ifAbsent: [ ^#() ].		^relatedIds collect: [ :aRelatedId | self objectIdentifiedAs: aRelatedId ofType: aRelatedClass ]		! !!DataBaseSession methodsFor: 'mapping - private' stamp: 'HernanWilkinson 11/1/2016 01:16'!unmapRecordIdentifiedAs: anId ofType: aClass	| record table mapper |	mapper := self mapperFor: aClass.	table := self tableNamed: mapper tableName.	record := table at: id ifAbsent: [ self error: ('Object identified as <1s> does not exist' expandMacrosWith: anId printString) ].		^ mapper unmap: record using: self! !!DataBaseSession methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 22:55'!initializeFor: aConfiguration	configuration := aConfiguration.	id := 0.	tables := nil.	cache := nil.! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:35'!defineIdOf: anObject	anObject instVarNamed: 'id' put: (self newIdFor: anObject).! !!DataBaseSession methodsFor: 'persistence - private' stamp: 'HernanWilkinson 10/28/2016 16:41'!delay	(Delay forMilliseconds: 100) wait! !!DataBaseSession methodsFor: 'persistance' stamp: 'HernanWilkinson 11/1/2016 01:28'!persist: anObject	| mapper |		self assertInTransaction.	self delay.		mapper := self mapperFor: anObject class.	mapper map: anObject using: self.		self addToCache: anObject ! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:26'!select: aCondition ofType: aClass	| mapper table |	self assertInTransaction.	self delay.		mapper := self mapperFor: aClass.	table := tables at: mapper tableName ifAbsent: [ ^ #() ].		^ table inject: OrderedCollection new into: [ :selected :record | self addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 11/1/2016 01:15'!objectIdentifiedAs: anId ofType: aClass	self assertInTransaction.	self delay.		^ cache at: anId ifAbsentPut: [ self unmapRecordIdentifiedAs: anId ofType: aClass ]! !!DataBaseSession methodsFor: 'selecting' stamp: 'HernanWilkinson 10/31/2016 22:17'!selectAllOfType: aClass 		^self select: [ :anObject | true ] ofType: aClass! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertInTransaction		cache isNil ifTrue: [ self error: 'There is no transaction currently' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!beginTransaction	self assertIsOpen.	self assertNotInTransasction.		cache := WeakKeyDictionary new.	! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:55'!assertNotInTransasction		cache notNil ifTrue: [ self error: 'There is an open transaction already' ]! !!DataBaseSession methodsFor: 'transaction management' stamp: 'HernanWilkinson 10/31/2016 22:57'!commit		self assertInTransaction.		cache := nil! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:00'!signalRelationAlreadyExistBetween: anOwner and: aRelated 	self error: ('Relation between id <1s> of type <2s> and id <3s> of type <4s> already exist'		expandMacrosWith: (self idOf: anOwner) printString		with: anOwner class name		with: (self idOf: aRelated) printString		with: aRelated class name)! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:05'!assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds	(relatedIds includes: relatedId) ifTrue: [ self signalRelationAlreadyExistBetween: anOwner and: aRelated ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:10'!relatedIdsOwnedBy: anOwner forType: aRelatedClass	| relatedIds table |	table := self relationTableFor: anOwner class relatedTo: aRelatedClass.	relatedIds := self relatedIdOwnedBy: anOwner on: table.		^ relatedIds! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!addRelated: aRelated ownedBy: anOwner	| relatedIds relatedId |	relatedIds := self relatedIdsOwnedBy: anOwner forType: aRelated class.	relatedId := aRelated instVarNamed: #id.	self assertRelationOwnedBy: anOwner isUniqueFor: aRelated identifiedAs: relatedId in: relatedIds.		relatedIds add: relatedId! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:06'!relatedIdOwnedBy: anOwner on: table	^ table at: (self idOf: anOwner) ifAbsentPut: [ Set new ]! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:27'!addToCache: anObject 	cache at: (self idOf: anObject) put: anObject ! !!DataBaseSession methodsFor: 'adding - private' stamp: 'HernanWilkinson 11/1/2016 01:03'!add: aRecord on: aTableName	| table existingRecord |	table := self tableNamed: aTableName.	existingRecord := table at: (self recordId: aRecord) ifAbsentPut: [ aRecord ].	existingRecord == aRecord ifFalse: [ self error: 'Duplicated primary key' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	self assertIsOpen.		tables := nil! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:36'!assertIsOpen		tables isNil ifTrue: [ self error: 'Session must be open to colaborate with it' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 10/31/2016 18:37'!assertIsClose		tables isNil ifFalse: [ self error: 'Session must be close' ]! !!DataBaseSession methodsFor: 'open/close' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	self assertIsClose.		tables := Dictionary new.	! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass	| ownerClassMapper relatedClassMapper |		ownerClassMapper := self mapperFor: anOwnerClass.	relatedClassMapper := self mapperFor: aRelatedClass.		^ownerClassMapper tableName,'_', relatedClassMapper tableName asPlural.! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 01:12'!relationTableFor: anOwnerClass relatedTo: aRelatedClass	| relationTableName table |	relationTableName := self relationTableNameOwnedBy: anOwnerClass relatedTo: aRelatedClass.	table := self tableNamed: relationTableName.		^ table! !!DataBaseSession methodsFor: 'tables - private' stamp: 'HernanWilkinson 11/1/2016 00:48'!tableNamed: aTableName	^ tables at: aTableName ifAbsentPut: [ Dictionary new ]! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 10/28/2016 16:35'!newIdFor: anObject	id := id + 1.	^id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:04'!recordId: aRecord	^aRecord at: #id! !!DataBaseSession methodsFor: 'id' stamp: 'HernanWilkinson 11/1/2016 01:00'!idOf: anObject	^anObject instVarNamed: #id! !!DataBaseSession methodsFor: 'selecting - private' stamp: 'HernanWilkinson 11/1/2016 01:28'!addInto: selected theOnesThatHold: aCondition unmapping: record with: mapper	| recordId aClassInstance |	recordId := self recordId: record.	aClassInstance := cache at: recordId ifAbsent: [ mapper unmap: record using: self ].	(aCondition value: aClassInstance) ifTrue: [ 		self addToCache: aClassInstance.		selected add: aClassInstance ].		^ selected! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DataBaseSession class	instanceVariableNames: ''!!DataBaseSession class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/28/2016 13:07'!for: aConfiguration	^self new initializeFor: aConfiguration! !Object subclass: #Mapping	instanceVariableNames: 'instanceVariableName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!embeded: anObject into: aRecord	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!unmap: aRecord into: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:26'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	self subclassResponsibility! !!Mapping methodsFor: 'assertions' stamp: 'MartinColl 6/30/2018 21:13'!assertIsValidFor: aClass 	(aClass hasInstVarNamed: instanceVariableName) ifFalse: [ 		self error: ('Invalid mapping for <1s> in class <2s>' expandMacrosWith: instanceVariableName with: aClass name) ] ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mapping class	instanceVariableNames: ''!!Mapping class methodsFor: 'assertions' stamp: 'HernanWilkinson 10/31/2016 23:41'!assertValidFieldName: aFieldName	aFieldName trimBoth isEmpty ifTrue: [ self error: 'Field name can not be empty' ]! !!Mapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 01:32'!defaultFieldNameFor: anInstanceVariableName	^anInstanceVariableName asString! !Mapping subclass: #EmbededMapping	instanceVariableNames: 'fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!embeded: anObject into: aRecord	aRecord at: fieldName put: (anObject instVarNamed: instanceVariableName) ! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 23:31'!unmap: aRecord into: anObject using: aDataBaseSession 	anObject instVarNamed: instanceVariableName put: (aRecord at: fieldName)! !!EmbededMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:23'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession 		! !!EmbededMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:30'!initializeFor: anInstanceVariableName into: aFieldName	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EmbededMapping class	instanceVariableNames: ''!!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:29'!withDefaultFieldNameFor: anInstanceVariableName	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName)! !!EmbededMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:30'!for: anInstanceVariableName into: aFieldName	^self new initializeFor: anInstanceVariableName into: aFieldName ! !Mapping subclass: #OneToManyMapping	instanceVariableNames: 'relatedType fieldName'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:35'!createRelationCollectionOn: aDataBaseSession ownedBy: anObject	^ OneToManySet on: aDataBaseSession ownedBy: anObject! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!mapOneToManyRelationshipsOf: anObject using: aDataBaseSession	| oldCollection newCollection |	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	oldCollection := anObject instVarNamed: instanceVariableName.		newCollection addAll: oldCollection.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 11/1/2016 01:37'!unmap: aRecord into: anObject using: aDataBaseSession	| newCollection related |	related := aDataBaseSession relatedOfType: relatedType for: anObject.	newCollection := self createRelationCollectionOn: aDataBaseSession ownedBy: anObject.	newCollection addAllNotPersisting: related.	anObject instVarNamed: instanceVariableName put: newCollection! !!OneToManyMapping methodsFor: 'mapping' stamp: 'HernanWilkinson 10/31/2016 21:16'!embeded: anObject into: aRecord	! !!OneToManyMapping methodsFor: 'initialization' stamp: 'HernanWilkinson 10/31/2016 23:34'!initializeFor: anInstanceVariableName into: aFieldName ofType: aClass	instanceVariableName := anInstanceVariableName.	fieldName := aFieldName.	relatedType := aClass ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManyMapping class	instanceVariableNames: ''!!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:40'!for: anInstanceVariableName into: aFieldName ofType: aClass	self assertValidFieldName: aFieldName.		^self new initializeFor: anInstanceVariableName into: aFieldName ofType: aClass! !!OneToManyMapping class methodsFor: 'instance creation' stamp: 'HernanWilkinson 10/31/2016 23:32'!withDefaultFieldNameFor: anInstanceVariableName ofType: aClass	^self for: anInstanceVariableName into: (self defaultFieldNameFor: anInstanceVariableName) ofType: aClass! !Set subclass: #OneToManySet	instanceVariableNames: 'session owner'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-PersistanceModel'!!OneToManySet methodsFor: 'removing' stamp: 'HernanWilkinson 10/31/2016 21:35'!remove: anObject ifAbsent: anAbsentBlock	self shouldBeImplemented ! !!OneToManySet methodsFor: 'initialization' stamp: 'HernanWilkinson 11/1/2016 00:11'!initializeOn: aDataBaseSession ownedBy: anOwner		session := aDataBaseSession.	owner := anOwner ! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:11'!add: anObject	session persist: anObject.	session addRelated: anObject ownedBy: owner.		super add: anObject.! !!OneToManySet methodsFor: 'adding' stamp: 'HernanWilkinson 11/1/2016 00:03'!addAllNotPersisting: aCollection 		^aCollection do: [ :anObjectToAdd | super add: anObjectToAdd ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OneToManySet class	instanceVariableNames: ''!!OneToManySet class methodsFor: 'instance creation' stamp: 'HernanWilkinson 11/1/2016 00:11'!on: aDataBaseSession ownedBy: anOwner		^self new initializeOn: aDataBaseSession ownedBy: anOwner ! !Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:41'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 10:42'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/1/2016 15:56'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/3/2016 09:11'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system customersIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'HernanWilkinson 11/2/2016 15:52'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:51'!setUp	system := Environment current createCustomerSystem.	system start.	system beginTransaction! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/4/2016 09:52'!tearDown	system commit.	system shutdown! !!CustomerImportTest methodsFor: 'importing' stamp: 'HernanWilkinson 11/4/2016 09:27'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream using: system) import! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 10:46'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/3/2016 09:21'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:10'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 11:00'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/29/2018 08:42'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize.! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/3/2016 09:21'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assert: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !Object subclass: #Database	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Database methodsFor: 'system live cycle' stamp: 'JeremiasAlbano 6/30/2018 17:36'!shutdown
	self subclassResponsibility! !!Database methodsFor: 'system live cycle' stamp: 'JeremiasAlbano 6/30/2018 17:36'!start
	self subclassResponsibility! !!Database methodsFor: 'transaction' stamp: 'JeremiasAlbano 6/30/2018 17:36'!beginTransaction
	self subclassResponsibility! !!Database methodsFor: 'transaction' stamp: 'JeremiasAlbano 6/30/2018 17:36'!commit
	self subclassResponsibility! !!Database methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 17:36'!add: aCustomer
	self subclassResponsibility! !!Database methodsFor: 'error signal' stamp: 'MartinColl 6/30/2018 20:43'!signalPartyNotFound	self error: self class partyNotFoundErrorDescription.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Database class	instanceVariableNames: ''!!Database class methodsFor: 'error' stamp: 'MartinColl 6/30/2018 20:43'!partyNotFoundErrorDescription	^'Party not found'.! !Object subclass: #ERPSystem	instanceVariableNames: 'database'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!ERPSystem methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 17:58'!storingOnDatabase: aDatabase 	database := aDatabase! !!ERPSystem methodsFor: 'system live cycle' stamp: 'JeremiasAlbano 6/30/2018 18:02'!shutdown	database shutdown! !!ERPSystem methodsFor: 'system live cycle' stamp: 'JeremiasAlbano 6/30/2018 18:02'!start	database start! !!ERPSystem methodsFor: 'transaction' stamp: 'JeremiasAlbano 6/30/2018 18:03'!beginTransaction	database beginTransaction! !!ERPSystem methodsFor: 'transaction' stamp: 'JeremiasAlbano 6/30/2018 18:03'!commit	database commit! !ERPSystem subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerSystem methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 18:05'!addCustomer: aCustomer	database add: aCustomer! !!CustomerSystem methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 17:46'!allCustomers	^database allOfType: Customer! !!CustomerSystem methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 17:41'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^database party: Customer identifiedAs: anIdentifycationType numbered: anIdentificationNumber! !!CustomerSystem methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 17:46'!customersIsEmpty	^(database allOfType: Customer) isEmpty.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerSystem class	instanceVariableNames: ''!!CustomerSystem class methodsFor: 'instance creation' stamp: 'JeremiasAlbano 6/30/2018 17:50'!withDatabase: aDatabase 	^self new storingOnDatabase: aDatabase! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Environment methodsFor: 'system creation' stamp: 'JeremiasAlbano 6/29/2018 09:08'!createSupplierSystem	self subclassResponsibility ! !!Environment methodsFor: 'system creation' stamp: 'HernanWilkinson 11/4/2016 09:49'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:46'!current		^self allSubclasses 		detect: [ :anEnvironemntClass | anEnvironemntClass isCurrent ]		ifFound: [ :anEnvironmentClass | anEnvironmentClass new ]		ifNone: [ self error: 'No environment detected' ]! !!Environment class methodsFor: 'enviroment selection' stamp: 'HernanWilkinson 11/4/2016 09:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!DevelopmentEnvironment methodsFor: 'system creation' stamp: 'JeremiasAlbano 6/30/2018 18:01'!createSupplierSystem		^SupplierSystem withDatabase: TransientDatabase new! !!DevelopmentEnvironment methodsFor: 'system creation' stamp: 'JeremiasAlbano 6/30/2018 17:48'!createCustomerSystem		^CustomerSystem withDatabase: TransientDatabase new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'environment selection' stamp: 'HernanWilkinson 11/4/2016 09:47'!isCurrent		^IntegrationEnvironment isCurrent not! !Object subclass: #Importer	instanceVariableNames: 'line readStream record newParty'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Importer methodsFor: 'importing - private' stamp: 'JeremiasAlbano 6/29/2018 08:30'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!Importer methodsFor: 'importing - private' stamp: 'JeremiasAlbano 6/29/2018 08:27'!importRecord
	self subclassResponsibility! !!Importer methodsFor: 'importing - private' stamp: 'JeremiasAlbano 6/29/2018 08:30'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!Importer methodsFor: 'importing - private' stamp: 'JeremiasAlbano 6/29/2018 08:31'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!Importer methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/29/2018 08:27'!initializeOn: aReadStream using: aCustomerSystem
	self subclassResponsibility! !!Importer methodsFor: 'error signal' stamp: 'JeremiasAlbano 6/29/2018 08:32'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!Importer methodsFor: 'error signal' stamp: 'JeremiasAlbano 6/29/2018 08:32'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!Importer methodsFor: 'importing' stamp: 'JeremiasAlbano 6/29/2018 08:31'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!Importer methodsFor: 'importing - private - address' stamp: 'JeremiasAlbano 6/29/2018 08:31'!isAddressRecord	^ record first = 'A'! !!Importer methodsFor: 'importing - private - address' stamp: 'JeremiasAlbano 6/30/2018 19:37'!assertThereIsPartyForAddress	newParty isNil ifTrue: [ self signalAddressWithoutPartyError ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'JeremiasAlbano 6/29/2018 08:30'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'JeremiasAlbano 6/30/2018 19:36'!importAddress	| newAddress |	self assertThereIsPartyForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newParty addAddress: newAddress! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Importer class	instanceVariableNames: ''!!Importer class methodsFor: 'error descriptions' stamp: 'JeremiasAlbano 6/29/2018 08:29'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!Importer class methodsFor: 'error descriptions' stamp: 'JeremiasAlbano 6/29/2018 08:29'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Importer subclass: #CustomerImporter	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!CustomerImporter methodsFor: 'initialization' stamp: 'HernanWilkinson 11/4/2016 09:26'!initializeOn: aReadStream using: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem! !!CustomerImporter methodsFor: 'error signal' stamp: 'JeremiasAlbano 6/30/2018 19:37'!signalAddressWithoutPartyError	self error: self class addressWithoutCustomerErrorDescription.! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'JeremiasAlbano 6/30/2018 18:06'!importCustomer	self assertValidCustomerRecordSize.	newParty := Customer new.	newParty firstName: record second.	newParty lastName: record third.	newParty identificationType: record fourth.	newParty identificationNumber: record fifth.	system addCustomer: newParty! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'JeremiasAlbano 6/30/2018 18:57'!from: aReadStream using: aCustomerSystem	^ self new initializeOn: aReadStream using: aCustomerSystem! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!IntegrationEnvironment methodsFor: 'system creation' stamp: 'MartinColl 6/30/2018 21:13'!createSupplierSystem		^SupplierSystem withDatabase: PersistentDatabase new! !!IntegrationEnvironment methodsFor: 'system creation' stamp: 'JeremiasAlbano 6/30/2018 17:56'!createCustomerSystem		^CustomerSystem withDatabase: PersistentDatabase new! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'environment selection' stamp: 'HernanWilkinson 11/4/2016 09:47'!not	self shouldBeImplemented.! !!IntegrationEnvironment class methodsFor: 'environment selection' stamp: 'MartinColl 6/30/2018 21:19'!isCurrent		^false! !Object subclass: #Party	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Party methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!addAddress: anAddress 	self addresses add: anAddress ! !!Party methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!numberOfAddresses		^self addresses size! !!Party methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!addressesIsEmpty		^self addresses isEmpty! !!Party methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!addressAt: aStreetName ifNone: noneClosure 		^self addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!isIdentifiedAs: anIdType numbered: anIdNumber 		^self identificationType = anIdType and: [ self identificationNumber = anIdNumber  ]! !Party subclass: #Customer	instanceVariableNames: 'id addresses firstName lastName identificationType identificationNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'initialization' stamp: 'MartinColl 6/30/2018 21:09'!initialize	addresses := OrderedCollection new.! !!Customer methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!addresses	^ addresses! !Database subclass: #PersistentDatabase	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!PersistentDatabase methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown	session shutdown! !!PersistentDatabase methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	session start! !!PersistentDatabase methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!beginTransaction	session beginTransaction! !!PersistentDatabase methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:18'!commit	session commit! !!PersistentDatabase methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentDatabase methodsFor: 'mapping' stamp: 'MartinColl 6/30/2018 21:15'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #name)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer))! !!PersistentDatabase methodsFor: 'mapping' stamp: 'HernanWilkinson 11/3/2016 08:52'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentDatabase methodsFor: 'query' stamp: 'HernanWilkinson 11/4/2016 09:33'!add: aCustomer	session persist: aCustomer! !!PersistentDatabase methodsFor: 'query' stamp: 'MartinColl 6/30/2018 21:18'!party: type identifiedAs: anIdentifycationType numbered: anIdentificationNumber	| parties |	parties := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: type.	parties size = 1		ifFalse: [ self signalPartyNotFound ].	^ parties anyOne! !!PersistentDatabase methodsFor: 'query' stamp: 'JeremiasAlbano 6/30/2018 17:52'!allOfType: type	^ session selectAllOfType: type! !!PersistentDatabase methodsFor: 'initialization' stamp: 'HernanWilkinson 11/3/2016 08:54'!initialize		super initialize.	self initializeSession. ! !!PersistentDatabase methodsFor: 'initialization' stamp: 'MartinColl 6/30/2018 21:15'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)! !Party subclass: #Supplier	instanceVariableNames: 'id name addresses customers identificationType identificationNumber'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!Supplier methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'MartinColl 6/30/2018 21:08'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 19:08'!addCustomer: aCustomer 	customers add: aCustomer.! !!Supplier methodsFor: 'customers' stamp: 'JeremiasAlbano 6/30/2018 19:17'!customerWithIdentificationType: idType numbered: idNumber ifNone: aBlockClosure 	^customers detect: [ :aCustomer |		aCustomer identificationType = idType and: [ aCustomer identificationNumber = idNumber ]	] ifNone: aBlockClosure.! !!Supplier methodsFor: 'addresses' stamp: 'MartinColl 6/30/2018 21:10'!addresses	^ addresses! !!Supplier methodsFor: 'initialization' stamp: 'MartinColl 6/30/2018 21:09'!initialize	addresses := OrderedCollection new.! !!Supplier methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 18:31'!withName: supplierName withIdentificationType: idType withIdentificationNumber: idNumber 	name := supplierName.	identificationType := idType.	identificationNumber := idNumber.	customers := OrderedCollection new.! !!Supplier methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 18:30'!name	^name! !!Supplier methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 18:30'!numberOfCustomers	^customers size! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Supplier class	instanceVariableNames: ''!!Supplier class methodsFor: 'instance creation' stamp: 'JeremiasAlbano 6/29/2018 08:56'!named: supplierName withIdentificationType: idType andIdentificationNumber: idNumber 	^self new withName: supplierName withIdentificationType: idType withIdentificationNumber: idNumber! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'importer customerSystem supplierSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 19:02'!assertSupplierBasicDataIsCorrect	| supplier idType idNumber |	idType := 'C'.	idNumber := '20-12345678-1'.	supplier := supplierSystem supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'PabloEscobar'		identfiedAs: idType		withNumber: idNumber		andNumberOfCustomers: 0		andNumberOfAddresses: 0.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/29/2018 08:14'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 19:39'!assertSupplierWithAddressDataIsCorrect	| supplier idType idNumber |	idType := 'C'.	idNumber := '20-12345678-1'.	supplier := supplierSystem supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'PabloEscobar'		identfiedAs: idType		withNumber: idNumber		andNumberOfCustomers: 0		andNumberOfAddresses: 1.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 18:44'!assert: supplier hasCustomerWithFirstName: firstName andLastName: lastName andIdentificationType: idType andIdentificationNumber: idNumber	| customer |	customer := supplier customerWithIdentificationType: idType numbered: idNumber ifNone: [ self fail ].	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/29/2018 08:43'!assert: supplier isNamed: name identfiedAs: idType withNumber: idNumber andNumberOfCustomers: customers andNumberOfAddresses: addresses	self assert: supplier name equals: name.	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.	self assert: supplier numberOfCustomers equals: customers.	self assert: supplier numberOfAddresses equals: addresses.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MartinColl 6/30/2018 20:12'!assertImportedSuppliersSizeIsCorrect	self assertImportedSuppliersSizeIs: 1.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 19:17'!assertSupplierWithNewCustomerDataIsCorrect	| supplier idType idNumber |	idType := 'C'.	idNumber := '20-12345678-1'.	supplier := supplierSystem supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'PabloEscobar'		identfiedAs: idType		withNumber: idNumber		andNumberOfCustomers: 1		andNumberOfAddresses: 0.	self		assert: supplier		hasCustomerWithFirstName: 'Pepe'		andLastName: 'Sanchez'		andIdentificationType: 'D'		andIdentificationNumber: '2233344'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MartinColl 6/30/2018 20:22'!assertTwoSuppliersDataIsCorrect	| gianinnaSupplier gianinnaIdType gianinnaIdNumber dalmaIdType dalmaIdNumber dalmaSupplier |	gianinnaIdType := 'C'.	gianinnaIdNumber := '20-12345678-1'.	gianinnaSupplier := supplierSystem supplierIdentifiedAs: gianinnaIdType numbered: gianinnaIdNumber.	dalmaIdType := 'J'.	dalmaIdNumber := '90-87654321-0'.	dalmaSupplier := supplierSystem supplierIdentifiedAs: dalmaIdType numbered: dalmaIdNumber.	self		assert: dalmaSupplier		isNamed: 'Dalma'		identfiedAs: dalmaIdType		withNumber: dalmaIdNumber		andNumberOfCustomers: 0		andNumberOfAddresses: 0.	self		assert: gianinnaSupplier		isNamed: 'Gianinna'		identfiedAs: gianinnaIdType		withNumber: gianinnaIdNumber		andNumberOfCustomers: 2		andNumberOfAddresses: 2.	self		assert: gianinnaSupplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: gianinnaSupplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'.	self		assert: gianinnaSupplier		hasCustomerWithFirstName: 'Juan'		andLastName: 'Perez'		andIdentificationType: 'D'		andIdentificationNumber: '5456774'.	self		assert: gianinnaSupplier		hasCustomerWithFirstName: 'Pepe'		andLastName: 'Sanchez'		andIdentificationType: 'D'		andIdentificationNumber: '2233344'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 19:02'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := supplierSystem customerIdentifiedAs: idType numbered: idNumber.	self		assert: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 0.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/30/2018 19:20'!assertSupplierWithExistentCustomerDataIsCorrect	| supplier idType idNumber |	idType := 'C'.	idNumber := '20-12345678-1'.	supplier := supplierSystem supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'PabloEscobar'		identfiedAs: idType		withNumber: idNumber		andNumberOfCustomers: 1		andNumberOfAddresses: 0.	self		assert: supplier		hasCustomerWithFirstName: 'Juan'		andLastName: 'Perez'		andIdentificationType: 'D'		andIdentificationNumber: '5456774'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MartinColl 6/30/2018 20:13'!assertImportedSuppliersSizeIs: size	self assert: supplierSystem allSuppliers size equals: size.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'MartinColl 6/30/2018 20:08'!assertSupplierWithAllTypesOfDataIsCorrect	| supplier idType idNumber |	idType := 'C'.	idNumber := '20-12345678-1'.	supplier := supplierSystem supplierIdentifiedAs: idType numbered: idNumber.	self		assert: supplier		isNamed: 'PabloEscobar'		identfiedAs: idType		withNumber: idNumber		andNumberOfCustomers: 2		andNumberOfAddresses: 2.	self		assert: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assert: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'.	self		assert: supplier		hasCustomerWithFirstName: 'Juan'		andLastName: 'Perez'		andIdentificationType: 'D'		andIdentificationNumber: '5456774'.	self		assert: supplier		hasCustomerWithFirstName: 'Pepe'		andLastName: 'Sanchez'		andIdentificationType: 'D'		andIdentificationNumber: '2233344'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'JeremiasAlbano 6/29/2018 08:20'!assertPepeSanchezWasImportedCorrectly	| customer |	customer := self alwaysImportedCustomer. 		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: self alwaysImportedCustomerIdType withNumber: self alwaysImportedCustomerIdNumber andNumberOfAddresses: 0.! !!SupplierImportTest methodsFor: 'test data' stamp: 'JeremiasAlbano 6/30/2018 19:10'!supplierWithNewCustomerTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1NC,Pepe,Sanchez,D,2233344'! !!SupplierImportTest methodsFor: 'test data' stamp: 'JeremiasAlbano 6/29/2018 08:38'!basicSupplierTestData	^ ReadStream on: 'S,PabloEscobar,C,20-12345678-1'! !!SupplierImportTest methodsFor: 'test data' stamp: 'JeremiasAlbano 6/30/2018 19:14'!supplierWithExistentCustomerTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1EC,D,5456774'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:21'!twoSuppliersTestData	^ ReadStream on:'S,Dalma,J,90-87654321-0S,Gianinna,C,20-12345678-1NC,Pepe,Sanchez,D,2233344EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:45'!supplierRecordWithOtherThanFourFieldsTestData	^ ReadStream on: 'S,PabloEscobar,C,20-12345678-1,other,fields'! !!SupplierImportTest methodsFor: 'test data' stamp: 'JeremiasAlbano 6/30/2018 19:30'!supplierWithAddressTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data' stamp: 'JeremiasAlbano 6/30/2018 19:23'!existentCustomer	| customer |	customer := Customer new.	customer firstName: 'Juan'.	customer lastName: 'Perez'.	customer identificationType: 'D'.	customer identificationNumber: '5456774'.	^customer.! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:56'!existentCustomerRecordWithOtherThanThreeFieldsTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1EC'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:38'!supplierWithMissingExistentCustomerTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1EC,D,99999'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:51'!newCustomerRecordWithOtherThanFiveFieldsTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1NC,Pepe,Sanchez'! !!SupplierImportTest methodsFor: 'test data' stamp: 'MartinColl 6/30/2018 20:02'!supplierWithAllTypesOfDataTestData	^ ReadStream on:'S,PabloEscobar,C,20-12345678-1NC,Pepe,Sanchez,D,2233344EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'JeremiasAlbano 6/30/2018 19:21'!setUp	supplierSystem := Environment current createSupplierSystem.	supplierSystem start.	supplierSystem beginTransaction.		customerSystem := Environment current createCustomerSystem.	customerSystem start.	customerSystem beginTransaction.		customerSystem addCustomer: self existentCustomer.! !!SupplierImportTest methodsFor: 'setup-teardown' stamp: 'JeremiasAlbano 6/30/2018 19:02'!tearDown	supplierSystem commit.	supplierSystem shutdown! !!SupplierImportTest methodsFor: 'importing' stamp: 'JeremiasAlbano 6/30/2018 19:03'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream usingSupplierSystem: supplierSystem andCustomerSystem: customerSystem) import! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!alwaysImportedCustomerIdNumber	^ '22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/29/2018 08:14'!alwaysImportedCustomerIdType	^ 'D'! !!SupplierImportTest methodsFor: 'test data - customer' stamp: 'JeremiasAlbano 6/30/2018 19:02'!alwaysImportedCustomer	| anIdentificationNumber anIdentifycationType |	anIdentifycationType := self alwaysImportedCustomerIdType.	anIdentificationNumber := self alwaysImportedCustomerIdNumber.	^ supplierSystem		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'JeremiasAlbano 6/29/2018 08:14'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'JeremiasAlbano 6/29/2018 08:14'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'JeremiasAlbano 6/29/2018 08:14'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'test data - address' stamp: 'JeremiasAlbano 6/29/2018 08:14'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!SupplierImportTest methodsFor: 'testing' stamp: 'JeremiasAlbano 6/30/2018 19:21'!testImportSupplierWithExistentCustomer	self importSuppliersFrom: self supplierWithExistentCustomerTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplierWithExistentCustomerDataIsCorrect.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:56'!testCanNotImportExistentCustomerRecordWithOtherThanThreeFields	self		should: [ self				importSuppliersFrom: self existentCustomerRecordWithOtherThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidExistentCustomerRecordErrorDescription. ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:03'!testImportSupplierWithAllTypesOfData	self importSuppliersFrom: self supplierWithAllTypesOfDataTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplierWithAllTypesOfDataIsCorrect.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:18'!testImportTwoSuppliers	self importSuppliersFrom: self twoSuppliersTestData.	self assertImportedSuppliersSizeIs: 2.	self assertTwoSuppliersDataIsCorrect.! !!SupplierImportTest methodsFor: 'testing' stamp: 'JeremiasAlbano 6/30/2018 19:29'!testImportSupplierWithAddress	self importSuppliersFrom: self supplierWithAddressTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplierWithAddressDataIsCorrect.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:47'!testCanNotImportSupplierRecordWithOtherThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithOtherThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: supplierSystem suppliersIsEmpty ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'JeremiasAlbano 6/30/2018 19:11'!testImportSupplierWithNewCustomer	self importSuppliersFrom: self supplierWithNewCustomerTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplierWithNewCustomerDataIsCorrect.! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:44'!testCanNotImportSupplierWithMissingExistentCustomer	self		should: [ self				importSuppliersFrom: self supplierWithMissingExistentCustomerTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: Database partyNotFoundErrorDescription. ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'MartinColl 6/30/2018 20:51'!testCanNotImportNewCustomerRecordWithOtherThanFiveFields	self		should: [ self				importSuppliersFrom: self newCustomerRecordWithOtherThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidNewCustomerRecordErrorDescription. ]! !!SupplierImportTest methodsFor: 'testing' stamp: 'JeremiasAlbano 6/30/2018 18:37'!testImportEmptySupplier	self importSuppliersFrom: self basicSupplierTestData.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplierBasicDataIsCorrect.! !Importer subclass: #SupplierImporter	instanceVariableNames: 'supplierSystem customerSystem'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'JeremiasAlbano 6/29/2018 08:52'!assertValidSupplierRecordSize	record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'JeremiasAlbano 6/30/2018 19:07'!importSupplier	self assertValidSupplierRecordSize.	newParty := Supplier		named: record second		withIdentificationType: record third		andIdentificationNumber: record fourth.	supplierSystem addSupplier: newParty.! !!SupplierImporter methodsFor: 'importing - private - supplier' stamp: 'JeremiasAlbano 6/29/2018 08:36'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'error signalling' stamp: 'MartinColl 6/30/2018 20:58'!signalInvalidExistentCustomerRecord 		self error: self class invalidExistentCustomerRecordErrorDescription! !!SupplierImporter methodsFor: 'error signalling' stamp: 'MartinColl 6/30/2018 20:48'!signalInvalidSupplierRecord	self error: self class invalidSupplierRecordErrorDescription.! !!SupplierImporter methodsFor: 'error signalling' stamp: 'JeremiasAlbano 6/30/2018 19:38'!signalAddressWithoutPartyError 		self error: self class addressWithoutSupplierErrorDescription.! !!SupplierImporter methodsFor: 'error signalling' stamp: 'MartinColl 6/30/2018 20:54'!signalInvalidNewCustomerRecord 		self error: self class invalidNewCustomerRecordErrorDescription! !!SupplierImporter methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 18:55'!initializeOn: aReadStream forSupplierSystem: aSupplierSystem andCustomerSystem: aCustomerSystem	readStream := aReadStream.	supplierSystem := aSupplierSystem.	customerSystem := aCustomerSystem.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MartinColl 6/30/2018 20:53'!importNewCustomer	| customer |	self assertValidNewCustomerRecordSize.	customer := Customer new.	customer firstName: record second.	customer lastName: record third.	customer identificationType: record fourth.	customer identificationNumber: record fifth.	customerSystem addCustomer: customer.	newParty addCustomer: customer.! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'JeremiasAlbano 6/30/2018 19:25'!isExistentCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'JeremiasAlbano 6/30/2018 18:47'!isNewCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MartinColl 6/30/2018 20:55'!assertValidNewCustomerRecordSize	record size ~= 5 ifTrue: [ self signalInvalidNewCustomerRecord ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MartinColl 6/30/2018 20:58'!assertValidExistentCustomerRecordSize	record size ~= 3 ifTrue: [ self signalInvalidExistentCustomerRecord ].! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'MartinColl 6/30/2018 20:59'!importExistentCustomer	| customer |	self assertValidExistentCustomerRecordSize.	customer := customerSystem customerIdentifiedAs: record second numbered: record third.	newParty addCustomer: customer.! !!SupplierImporter methodsFor: 'importing' stamp: 'JeremiasAlbano 6/30/2018 19:24'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isNewCustomerRecord ifTrue: [ ^self importNewCustomer ].	self isExistentCustomerRecord ifTrue: [ ^self importExistentCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'JeremiasAlbano 6/30/2018 18:59'!from: aReadStream usingSupplierSystem: aSupplierSystem andCustomerSystem: aCustomerSystem	^ self new initializeOn: aReadStream forSupplierSystem: aSupplierSystem andCustomerSystem: aCustomerSystem.! !!SupplierImporter class methodsFor: 'error description' stamp: 'MartinColl 6/30/2018 20:57'!invalidExistentCustomerRecordErrorDescription	^'Invalid existent customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'MartinColl 6/30/2018 20:52'!invalidNewCustomerRecordErrorDescription	^'Invalid new customer record'.! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'JeremiasAlbano 6/30/2018 19:38'!addressWithoutSupplierErrorDescription	^'There is no Supplier for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'JeremiasAlbano 6/29/2018 08:54'!invalidSupplierRecordErrorDescription	^'Invalid supplier record'.! !ERPSystem subclass: #SupplierSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!SupplierSystem methodsFor: 'suppliers' stamp: 'JeremiasAlbano 6/30/2018 18:17'!supplierIdentifiedAs: anIdentificationType numbered: anIdentificationNumber	^database party: Supplier identifiedAs: anIdentificationType numbered: anIdentificationNumber! !!SupplierSystem methodsFor: 'suppliers' stamp: 'MartinColl 6/30/2018 20:47'!suppliersIsEmpty	^(database allOfType: Supplier) isEmpty.! !!SupplierSystem methodsFor: 'adding' stamp: 'JeremiasAlbano 6/30/2018 18:14'!allSuppliers	^database allOfType: Supplier! !!SupplierSystem methodsFor: 'adding' stamp: 'JeremiasAlbano 6/30/2018 18:04'!addSupplier: aSupplier	database add: aSupplier! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierSystem class	instanceVariableNames: ''!!SupplierSystem class methodsFor: 'instance creation' stamp: 'JeremiasAlbano 6/30/2018 18:01'!withDatabase: aDatabase	^self new storingOnDatabase: aDatabase! !Database subclass: #TransientDatabase	instanceVariableNames: 'parties'	classVariableNames: ''	poolDictionaries: ''	category: 'IS1-CustomerImport-Model'!!TransientDatabase methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!beginTransaction		! !!TransientDatabase methodsFor: 'transaction' stamp: 'HernanWilkinson 11/4/2016 09:39'!commit		! !!TransientDatabase methodsFor: 'initialization' stamp: 'JeremiasAlbano 6/30/2018 18:21'!initialize		parties := OrderedCollection new! !!TransientDatabase methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:52'!shutdown		! !!TransientDatabase methodsFor: 'system live cycle' stamp: 'HernanWilkinson 11/4/2016 09:51'!start	! !!TransientDatabase methodsFor: 'query' stamp: 'JeremiasAlbano 6/30/2018 18:21'!add: aCustomer	parties add: aCustomer! !!TransientDatabase methodsFor: 'query' stamp: 'MartinColl 6/30/2018 20:42'!party: type identifiedAs: anIdentifycationType numbered: anIdentificationNumber		^parties		detect: [ :aParty | (aParty class = type) and: [ aParty isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] ]		ifNone: [ self signalPartyNotFound ]! !!TransientDatabase methodsFor: 'query' stamp: 'JeremiasAlbano 6/30/2018 18:21'!allOfType: party	^ parties copy! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 30 June 2018 at 9:20:24.01541 pm'!!String methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 23:57'!asPlural		^self last = $s 		ifTrue: [ self, 'es' ]		ifFalse: [ self, 's' ]! !'From Pharo6.0 of 13 May 2016 [Latest update: #60540] on 30 June 2018 at 9:20:24.015779 pm'!!Object methodsFor: '*IS1-CustomerImport' stamp: 'HernanWilkinson 10/31/2016 19:27'!toDo: aString 	! !